
<!doctype html>

<html lang="en">
	<head>
		<meta charset="utf-8">
		<title>Parcelino.</title>
		<meta name="description" content="form to add new parcel">
		<meta name="author" content="Alberto Paros">
		<meta name="viewport" content= "width=device-width, initial-scale=1.0">
		<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />        
		<link href="css/style.css" type="text/css" rel="stylesheet" />
	</head>
	<body>
		<header>
			<h1><a href="/">Parcelino<span id="dot">.</span></a></h1>
			<ul>
                <li class="logout"><a href="/logout"><span class="material-symbols-outlined">logout</span><span>Log-out</span></a></li>
			</ul>
		</header>
		<main>
			<section class="main-left">
				<nav class="side-nav">
					<ol class="side-nav-bunch">
						<li><a href="/"><span id="side-nav-icon" class="material-symbols-outlined">home</span><span id="side-nav-text">Home</span></a></li>
						<li><a href="/customer-send"><span id="side-nav-icon" class="material-symbols-outlined">add_box</span><span>Send</span></a></li>
						<li><a href="/customer-current"><span id="side-nav-icon" class="material-symbols-outlined">schedule</span><span>Current</span></a></li>
						<li><a href="/customer-history"><span id="side-nav-icon" class="material-symbols-outlined">inbox</span><span>History</span></a></li>
					</ol>
				</nav>
			</section>
			<section class="main-right">
				<p id="alert" style="display:'none'"></p>
				<section class="send-parcel-form-main">
					<form class="address-form" action="/customer-send" method="post" enctype="multipart/form-data" autocomplete="off">
						<p><strong>UK</strong> only*</p>
						<label>Recipient's Name:
							<input id="recipient_name" name="recipient_name" required />
						</label>
						<label>Pick up address:
							<input  id="sender_address" 
									name="sender_address" 
									type="text" 
									autocomplete="off" 
									placeholder="Search..."
									required />
						</label>
						<label>Apartment, unit, suite, or floor
							<input id="sender_address_details" name="sender_address_details" />
						</label>
						<label>City
							<input id="sender_city" name="sender_city" required />
						</label>
						<label>Postal code
							<input id="sender_postcode" name="sender_postcode" required />
						</label>
						<label>Country/Region
							<input id="sender_country" name="sender_country" required />
						</label>
						<label>Drop-off address:
							<input  id="recipient_address" 
									name="recipient_address" 
									type="text" 
									autocomplete="off" 
									placeholder="Search..."
									required />
						</label>
						<label>Apartment, unit, suite, or floor
							<input id="recipient_address_details" name="recipient_address_details" />
						</label>
						<label>City
							<input id="recipient_city" name="recipient_city" required />
						</label>
						<label>Postal code
							<input id="recipient_postcode" name="recipient_postcode" required />
						</label>
						<label>Country/Region
							<input id="recipient_country" name="recipient_country" required />
						</label>
						<label>
							Weight
							<input type="range" name="weight_kg" min="0" max="20" value="1">
							<output name="weight_value">1</output>
							Kg
						</label>
						<input class="submit-button" type="submit" value="Submit" >
					</form>
				</section>
			</section>
		</main>

		<script>
		//Change value displayed when moving slider 
		const slider = document.querySelector('[name=weight_kg]')
		slider.addEventListener('input', event => {
			document.querySelector('[name=weight_value]').value = slider.value
		})

        let autocomplete
        let sender_address
        let sender_address_details
        let sender_postcode
        let sender_city
        let sender_country
        let recipient_address
        let recipient_address_details
        let recipient_postcode 
        let recipient_city 
        let recipient_country       
       
        const alert = document.getElementById('alert') 

    	function initAutocomplete() {
			sender_address = document.querySelector("[name=sender_address]")
			sender_address_details = document.querySelector("[name=sender_address_details]")
            sender_city = document.querySelector("[name=sender_city]")
			sender_postcode = document.querySelector("[name=sender_postcode]")
            sender_country = document.querySelector("[name=sender_country]")

			recipient_address = document.querySelector("[name=recipient_address]")
            recipient_address_details = document.querySelector("[name=recipient_address_details]")
			recipient_postcode = document.querySelector("[name=recipient_postcode]")
			recipient_city = document.querySelector("[name=recipient_city]")
			recipient_country = document.querySelector("[name=recipient_country]")
			
			autocomplete = new google.maps.places.Autocomplete(sender_address, {
				componentRestrictions: { country: ["uk"] },
				fields: ["address_components", "geometry"],
				types: ["address"],
			});
			
            autocomplete2 = new google.maps.places.Autocomplete(recipient_address, {
				componentRestrictions: { country: ["uk"] }, //no-restrictions, add uk or usa for restrictions
				fields: ["address_components", "geometry"],
                types: ["address"],
			});
			
			sender_address.focus()
			
			autocomplete.addListener("place_changed", fillInAddressSender)
            autocomplete2.addListener("place_changed", fillInAddressRecipient)
		}

		function fillInAddressSender() {
		// Get the place details from the autocomplete object.
			const place = autocomplete.getPlace()
			console.log(place)
			let sender_address1 = ""
			let sender_postcode1 = ""

			try{
                for (const component of place.address_components) {
                    const componentType = component.types[0]

                    switch (componentType) {
                    case "street_number": {
                        sender_address1 = `${component.long_name} ${sender_address1}`
                        break
                    }

                    case "route": {
                        sender_address1 += component.short_name
                        break
                    }
                    case "postal_code": {
                        sender_postcode1 = `${component.long_name}${sender_postcode1}`
                        break
                    }
                    case "postal_code_suffix": {
                        sender_postcode1 = `${sender_postcode1}-${component.long_name}`
                        console.log(sender_postcode1)
                        break
                    }
                    case "postal_town":{
                        sender_city.value = component.long_name
                        break
                    } 
                    case "locality":{
                        sender_city.value = component.long_name
                        break
                    }
                    case "country":
                        sender_country.value = component.long_name
                        break
                    }
                }
            } catch(err){
                alert.innerHTML = 'Try inserting the Address again' 
                alert.style.display = 'block'
                setTimeout( ()=>{
                    alert.style.display = 'none'
                    }, 1500)
        }
            
		sender_address.value = sender_address1
		sender_postcode.value = sender_postcode1
		recipient_address.focus()
        }
        
		function fillInAddressRecipient() {
		// Get the place details from the autocomplete object.
			const place = autocomplete2.getPlace()
			let recipient_address1 = ""
			let recipient_postcode1 = ""

			try{
                for (const component of place.address_components) {
                    const componentType = component.types[0]

                    switch (componentType) {
                    case "street_number": {
                        //console.log(component)
                        //console.log(component.long_name)
                        //console.log(address1)
                        recipient_address1 = `${component.long_name} ${recipient_address1}`
                        break
                    }

                    case "route": {
                        recipient_address1 += component.short_name
                        break
                    }
                    case "postal_code": {
                        recipient_postcode1 = `${component.long_name}${recipient_postcode1}`
                        break
                    }
                    case "postal_code_suffix": {
                        recipient_postcode1 = `${recipient_postcode1}-${component.long_name}`
                        console.log(recipient_postcode1)
                        break
                    }
                    case "postal_town":{
                        recipient_city.value = component.long_name
                        break
                    }
                    case "country":
                        recipient_country.value = component.long_name
                        break
                    }
                }
            } catch(err){
                alert.innerHTML = 'Try inserting the Address again' 
                alert.style.display = 'block'
                setTimeout( ()=>{
                    alert.style.display = 'none'
                    }, 1500)
        }
            
		recipient_address.value = recipient_address1
		recipient_postcode.value = recipient_postcode1
		//recipient_address_details.focus()
        }

		window.initAutocomplete = initAutocomplete;
		</script>

		<script async
    		src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBMN0tTYpnYsYcy62DPJoLB_bqZqHnNVDU&libraries=places,geometry&callback=initAutocomplete">
		</script>
	</body>
</html>
